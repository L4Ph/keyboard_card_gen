<script>
class KeyboardCardGenerator {
  constructor() {
    this.canvas = null;
    this.ctx = null;
    this.cardData = {};
    this.backgroundImage = null;
    this.colorSchemes = {
      blue: { primary: '#3b82f6', secondary: '#1e40af', accent: '#dbeafe' },
      purple: { primary: '#8b5cf6', secondary: '#7c3aed', accent: '#ede9fe' },
      orange: { primary: '#f97316', secondary: '#ea580c', accent: '#fed7aa' },
      green: { primary: '#10b981', secondary: '#059669', accent: '#d1fae5' },
      red: { primary: '#ef4444', secondary: '#dc2626', accent: '#fecaca' }
    };
    
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.createCanvas();
  }

  setupEventListeners() {
    const form = document.getElementById('cardForm');
    const generateBtn = document.getElementById('generateCard');
    const downloadSVGBtn = document.getElementById('downloadSVG');
    const downloadPNGBtn = document.getElementById('downloadPNG');
    const photoInput = document.getElementById('keyboardPhoto');

    if (form) {
      form.addEventListener('input', () => this.updateCardData());
    }

    if (generateBtn) {
      generateBtn.addEventListener('click', () => this.generateCard());
    }

    if (downloadSVGBtn) {
      downloadSVGBtn.addEventListener('click', () => this.downloadSVG());
    }

    if (downloadPNGBtn) {
      downloadPNGBtn.addEventListener('click', () => this.downloadPNG());
    }

    if (photoInput) {
      photoInput.addEventListener('change', (e) => this.handlePhotoUpload(e));
    }
  }

  createCanvas() {
    this.canvas = document.createElement('canvas');
    // A6 size (148x105mm) at 300 DPI: 1748 x 1240 pixels
    this.canvas.width = 1748;
    this.canvas.height = 1240;
    this.ctx = this.canvas.getContext('2d');
  }

  updateCardData() {
    const formData = new FormData(document.getElementById('cardForm'));
    this.cardData = Object.fromEntries(formData.entries());
  }

  async handlePhotoUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    try {
      this.backgroundImage = await this.loadImage(file);
      // Update preview if card has been generated
      if (Object.keys(this.cardData).length > 0) {
        this.generateCard();
      }
    } catch (error) {
      console.error('Error loading image:', error);
    }
  }

  loadImage(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const img = new Image();
        img.onload = () => resolve(img);
        img.onerror = reject;
        img.src = e.target.result;
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  async generateCard() {
    this.updateCardData();
    
    if (!this.cardData.keyboardName) {
      alert('Please fill in at least the keyboard name');
      return;
    }

    await this.drawCard();
    this.updatePreview();
    this.enableDownloadButtons();
  }

  async drawCard() {
    const ctx = this.ctx;
    const colorScheme = this.colorSchemes[this.cardData.colorScheme || 'blue'];
    
    // Clear canvas
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
    // Background
    if (this.backgroundImage) {
      await this.drawBackgroundImage();
    } else {
      // Gradient background
      const gradient = ctx.createLinearGradient(0, 0, this.canvas.width, this.canvas.height);
      gradient.addColorStop(0, colorScheme.accent);
      gradient.addColorStop(1, '#ffffff');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }

    // Semi-transparent overlay for text readability
    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
    ctx.fillRect(0, this.canvas.height * 0.5, this.canvas.width, this.canvas.height * 0.5);

    // Draw content
    this.drawCardContent(colorScheme);
  }

  async drawBackgroundImage() {
    const ctx = this.ctx;
    const img = this.backgroundImage;
    
    // Calculate dimensions to cover the canvas while maintaining aspect ratio
    const canvasRatio = this.canvas.width / this.canvas.height;
    const imgRatio = img.width / img.height;
    
    let drawWidth, drawHeight, drawX, drawY;
    
    if (imgRatio > canvasRatio) {
      drawHeight = this.canvas.height;
      drawWidth = drawHeight * imgRatio;
      drawX = (this.canvas.width - drawWidth) / 2;
      drawY = 0;
    } else {
      drawWidth = this.canvas.width;
      drawHeight = drawWidth / imgRatio;
      drawX = 0;
      drawY = (this.canvas.height - drawHeight) / 2;
    }

    // Apply transparency
    ctx.globalAlpha = 0.3;
    ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);
    ctx.globalAlpha = 1.0;
  }

  drawCardContent(colorScheme) {
    const ctx = this.ctx;
    const padding = 80;
    const contentY = this.canvas.height * 0.5 + padding;
    
    // Keyboard name
    if (this.cardData.keyboardName) {
      ctx.fillStyle = colorScheme.primary;
      ctx.font = 'bold 72px Inter, sans-serif';
      ctx.textAlign = 'center';
      this.wrapText(ctx, this.cardData.keyboardName, this.canvas.width / 2, contentY, this.canvas.width - padding * 2, 80);
    }

    // Owner
    if (this.cardData.owner) {
      ctx.fillStyle = colorScheme.secondary;
      ctx.font = 'bold 56px Inter, sans-serif';
      ctx.textAlign = 'center';
      const ownerY = contentY + (this.cardData.keyboardName ? 100 : 0);
      this.wrapText(ctx, this.cardData.owner, this.canvas.width / 2, ownerY, this.canvas.width - padding * 2, 64);
    }

    // Specifications
    const specsY = contentY + 180;
    ctx.fillStyle = '#374151';
    ctx.font = '36px Inter, sans-serif';
    ctx.textAlign = 'left';
    
    let currentY = specsY;
    const leftX = padding;
    const rightX = this.canvas.width / 2 + 40;

    if (this.cardData.switches) {
      ctx.fillText('Switches:', leftX, currentY);
      ctx.font = 'bold 36px Inter, sans-serif';
      ctx.fillText(this.cardData.switches, rightX, currentY);
      ctx.font = '36px Inter, sans-serif';
      currentY += 45;
    }

    if (this.cardData.keycaps) {
      ctx.fillText('Keycaps:', leftX, currentY);
      ctx.font = 'bold 36px Inter, sans-serif';
      ctx.fillText(this.cardData.keycaps, rightX, currentY);
      ctx.font = '36px Inter, sans-serif';
      currentY += 45;
    }

    if (this.cardData.layout) {
      ctx.fillText('Layout:', leftX, currentY);
      ctx.font = 'bold 36px Inter, sans-serif';
      ctx.fillText(this.cardData.layout, rightX, currentY);
      ctx.font = '36px Inter, sans-serif';
      currentY += 45;
    }

    // Description
    if (this.cardData.description) {
      currentY += 25;
      ctx.font = '28px Inter, sans-serif';
      ctx.fillStyle = '#6b7280';
      this.wrapText(ctx, this.cardData.description, leftX, currentY, this.canvas.width - padding * 2, 35);
    }

    // Decorative elements
    this.drawDecorations(colorScheme);
  }

  drawDecorations(colorScheme) {
    const ctx = this.ctx;
    
    // Top accent line
    ctx.fillStyle = colorScheme.primary;
    ctx.fillRect(0, 0, this.canvas.width, 20);
    
    // Bottom accent line
    ctx.fillRect(0, this.canvas.height - 20, this.canvas.width, 20);
  }

  wrapText(ctx, text, x, y, maxWidth, lineHeight) {
    const words = text.split(' ');
    let line = '';
    let currentY = y;

    for (let n = 0; n < words.length; n++) {
      const testLine = line + words[n] + ' ';
      const metrics = ctx.measureText(testLine);
      const testWidth = metrics.width;
      
      if (testWidth > maxWidth && n > 0) {
        ctx.fillText(line, x, currentY);
        line = words[n] + ' ';
        currentY += lineHeight;
      } else {
        line = testLine;
      }
    }
    ctx.fillText(line, x, currentY);
  }

  updatePreview() {
    const previewContainer = document.getElementById('cardPreview');
    if (!previewContainer) return;

    // Create preview canvas with correct A6 aspect ratio (148:105)
    const previewCanvas = document.createElement('canvas');
    previewCanvas.width = 420;
    previewCanvas.height = 297;
    previewCanvas.style.width = '100%';
    previewCanvas.style.height = '100%';
    previewCanvas.style.borderRadius = '8px';
    
    const previewCtx = previewCanvas.getContext('2d');
    previewCtx.drawImage(this.canvas, 0, 0, previewCanvas.width, previewCanvas.height);
    
    previewContainer.innerHTML = '';
    previewContainer.appendChild(previewCanvas);
  }

  enableDownloadButtons() {
    const downloadSVGBtn = document.getElementById('downloadSVG');
    const downloadPNGBtn = document.getElementById('downloadPNG');
    
    if (downloadSVGBtn) downloadSVGBtn.disabled = false;
    if (downloadPNGBtn) downloadPNGBtn.disabled = false;
  }

  generateSVG() {
    const colorScheme = this.colorSchemes[this.cardData.colorScheme || 'blue'];
    const width = 420; // A6 width in landscape (148mm scaled)
    const height = 297; // A6 height in landscape (105mm scaled)
    
    let svg = `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">`;
    
    // Background
    svg += `<defs>
      <linearGradient id="bg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:${colorScheme.accent};stop-opacity:1" />
        <stop offset="100%" style="stop-color:#ffffff;stop-opacity:1" />
      </linearGradient>
    </defs>`;
    
    svg += `<rect width="100%" height="100%" fill="url(#bg-gradient)"/>`;
    
    // Background image (if exists)
    if (this.backgroundImage) {
      const canvas = document.createElement('canvas');
      canvas.width = this.backgroundImage.width;
      canvas.height = this.backgroundImage.height;
      const ctx = canvas.getContext('2d');
      ctx.globalAlpha = 0.3;
      ctx.drawImage(this.backgroundImage, 0, 0);
      const dataURL = canvas.toDataURL();
      svg += `<image href="${dataURL}" width="100%" height="100%" preserveAspectRatio="xMidYMid slice"/>`;
    }
    
    // Content overlay
    svg += `<rect x="0" y="${height * 0.5}" width="100%" height="${height * 0.5}" fill="rgba(255,255,255,0.9)"/>`;
    
    // Text content
    const contentY = height * 0.5 + 20;
    
    if (this.cardData.keyboardName) {
      svg += `<text x="${width/2}" y="${contentY + 25}" text-anchor="middle" font-family="Inter, sans-serif" font-size="20" font-weight="bold" fill="${colorScheme.primary}">${this.cardData.keyboardName}</text>`;
    }
    
    if (this.cardData.owner) {
      const ownerY = contentY + (this.cardData.keyboardName ? 45 : 25);
      svg += `<text x="${width/2}" y="${ownerY}" text-anchor="middle" font-family="Inter, sans-serif" font-size="16" font-weight="bold" fill="${colorScheme.secondary}">${this.cardData.owner}</text>`;
    }
    
    // Specifications
    let specY = contentY + 70;
    const leftX = 20;
    
    if (this.cardData.switches) {
      svg += `<text x="${leftX}" y="${specY}" font-family="Inter, sans-serif" font-size="10" fill="#374151">Switches: <tspan font-weight="bold">${this.cardData.switches}</tspan></text>`;
      specY += 12;
    }
    
    if (this.cardData.keycaps) {
      svg += `<text x="${leftX}" y="${specY}" font-family="Inter, sans-serif" font-size="10" fill="#374151">Keycaps: <tspan font-weight="bold">${this.cardData.keycaps}</tspan></text>`;
      specY += 12;
    }
    
    if (this.cardData.layout) {
      svg += `<text x="${leftX}" y="${specY}" font-family="Inter, sans-serif" font-size="10" fill="#374151">Layout: <tspan font-weight="bold">${this.cardData.layout}</tspan></text>`;
      specY += 12;
    }
    
    // Description (simplified for SVG)
    if (this.cardData.description && this.cardData.description.length < 100) {
      svg += `<text x="${leftX}" y="${specY + 15}" font-family="Inter, sans-serif" font-size="8" fill="#6b7280">${this.cardData.description}</text>`;
    }
    
    // Decorative elements
    svg += `<rect x="0" y="0" width="100%" height="5" fill="${colorScheme.primary}"/>`;
    svg += `<rect x="0" y="${height - 5}" width="100%" height="5" fill="${colorScheme.primary}"/>`;
    
    svg += '</svg>';
    
    return svg;
  }

  downloadSVG() {
    const svg = this.generateSVG();
    const blob = new Blob([svg], { type: 'image/svg+xml' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `${this.cardData.keyboardName || 'keyboard-card'}.svg`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  downloadPNG() {
    const link = document.createElement('a');
    link.download = `${this.cardData.keyboardName || 'keyboard-card'}.png`;
    link.href = this.canvas.toDataURL('image/png', 1.0);
    link.click();
  }
}

// Initialize the card generator when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new KeyboardCardGenerator();
});
</script>